"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6347],{8090:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var a=s(5893),o=s(1151);const t={title:"Getting Started",tags:["Spark","Hadoop","Docker","OpenHouse","Iceberg"],sidebar_position:2},r="OpenHouse on Spark & HDFS",i={id:"getting_started",title:"Getting Started",description:"In this guide, we will quickly set up a running environment and experiment with some simple SQL commands. Our",source:"@site/docs/getting_started.md",sourceDirName:".",slug:"/getting_started",permalink:"/docs/getting_started",draft:!1,unlisted:!1,tags:[{label:"Spark",permalink:"/docs/tags/spark"},{label:"Hadoop",permalink:"/docs/tags/hadoop"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"OpenHouse",permalink:"/docs/tags/open-house"},{label:"Iceberg",permalink:"/docs/tags/iceberg"}],version:"current",sidebarPosition:2,frontMatter:{title:"Getting Started",tags:["Spark","Hadoop","Docker","OpenHouse","Iceberg"],sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/docs/intro"},next:{title:"User Guide",permalink:"/docs/category/user-guide"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create and write to OpenHouse Tables",id:"create-and-write-to-openhouse-tables",level:2},{value:"Get environment ready",id:"get-environment-ready",level:3},{value:"Run SQL commands",id:"run-sql-commands",level:3},{value:"(Optional) Control access to Tables",id:"optional-control-access-to-tables",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"openhouse-on-spark--hdfs",children:"OpenHouse on Spark & HDFS"}),"\n",(0,a.jsxs)(n.p,{children:["In this guide, we will quickly set up a running environment and experiment with some simple SQL commands. Our\nenvironment will include all the core OpenHouse services such as ",(0,a.jsx)(n.a,{href:"/docs/intro#catalog-service",children:"Catalog Service"}),",\n",(0,a.jsx)(n.a,{href:"/docs/intro#house-table-service",children:"House Table service"})," and ",(0,a.jsx)(n.a,{href:"/docs/intro#control-plane-for-tables",children:"others"}),",\n",(0,a.jsx)(n.a,{href:"https://spark.apache.org/releases/spark-release-3-1-1.html",children:"a Spark 3.1 engine"})," and\nalso ",(0,a.jsx)(n.a,{href:"https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html#NameNode+and+DataNodes",children:"HDFS namenode and datanode"}),". By the end of this walkthrough, we will have created some tables on OpenHouse,\ninserted data in them, and queried data. For more information on various docker environments and how to set them up\nplease see the ",(0,a.jsx)(n.a,{href:"https://github.com/linkedin/openhouse/blob/main/SETUP.md",children:"SETUP.md"})," guide."]}),"\n",(0,a.jsx)(n.p,{children:"In the consecutive optional section, you can learn more about some simple GRANT REVOKE commands and how\nOpenHouse manages access control."}),"\n",(0,a.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.docker.com/get-docker/",children:"Docker CLI"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/docker/compose-cli/blob/main/INSTALL.md",children:"Docker Compose CLI"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"create-and-write-to-openhouse-tables",children:"Create and write to OpenHouse Tables"}),"\n",(0,a.jsx)(n.h3,{id:"get-environment-ready",children:"Get environment ready"}),"\n",(0,a.jsxs)(n.p,{children:["First, clone ",(0,a.jsx)(n.a,{href:"https://github.com/linkedin/openhouse",children:"OpenHouse github repository"})," and\nrun ",(0,a.jsx)(n.code,{children:"./gradlew build"})," command at the root directory. After the command succeeds you should see ",(0,a.jsx)(n.code,{children:"BUILD SUCCESSFUL"}),"\nmessage."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"openhouse$main>  ./gradlew build\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Execute ",(0,a.jsx)(n.code,{children:"docker compose -f infra/recipes/docker-compose/oh-hadoop-spark/docker-compose.yml up -d --build"})," command to\nbring up docker containers for OpenHouse services, Spark and HDFS."]}),"\n",(0,a.jsx)(n.h3,{id:"run-sql-commands",children:"Run SQL commands"}),"\n",(0,a.jsx)(n.p,{children:"Let us execute some basic SQL commands to create table, add data and query data."}),"\n",(0,a.jsx)(n.p,{children:"First login to the driver node and start the spark-shell."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"oh-hadoop-spark$main>  docker exec -it local.spark-master /bin/bash\n\nopenhouse@0a9ed5853291:/opt/spark$  bin/spark-shell --packages org.apache.iceberg:iceberg-spark-runtime-3.1_2.12:1.2.0   \\\n--jars openhouse-spark-runtime_2.12-*-all.jar  \\\n--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,com.linkedin.openhouse.spark.extensions.OpenhouseSparkSessionExtensions   \\\n--conf spark.sql.catalog.openhouse=org.apache.iceberg.spark.SparkCatalog   \\\n--conf spark.sql.catalog.openhouse.catalog-impl=com.linkedin.openhouse.spark.OpenHouseCatalog     \\\n--conf spark.sql.catalog.openhouse.metrics-reporter-impl=com.linkedin.openhouse.javaclient.OpenHouseMetricsReporter    \\\n--conf spark.sql.catalog.openhouse.uri=http://openhouse-tables:8080   \\\n--conf spark.sql.catalog.openhouse.auth-token=$(cat /var/config/openhouse.token) \\\n--conf spark.sql.catalog.openhouse.cluster=LocalHadoopCluster\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["the configuration ",(0,a.jsx)(n.code,{children:"spark.sql.catalog.openhouse.uri=http://openhouse-tables:8080"})," points to the docker container\nrunning the ",(0,a.jsx)(n.a,{href:"/docs/intro#catalog-service",children:"OpenHouse Catalog Service"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:"Once the spark-shell is up, we run the following command to create a simple table."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'scala>  spark.sql("CREATE TABLE openhouse.db.tb (ts timestamp, data string) PARTITIONED BY (days(ts))")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Run a ",(0,a.jsx)(n.code,{children:"SHOW TABLES"})," command to confirm the table that we just created!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'\nscala> spark.sql("SHOW TABLES IN openhouse.db").show\n\n+---------+---------+\n|namespace|tableName|\n+---------+---------+\n| db      |       tb|\n+---------+---------+\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Great! We have created our first table. Now, let us put some data in it and retrieve it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'\nscala>  spark.sql("""\nINSERT INTO TABLE openhouse.db.tb VALUES\n   (current_timestamp(), \'today\'),\n   (date_sub(CAST(current_timestamp() as DATE), 30), \'today-30d\')\n """)\n\nscala> spark.sql("SELECT * FROM openhouse.db.tb").show\n\n+--------------------+---------+\n|                  ts|     data|\n+--------------------+---------+\n|2024-03-22 19:39:...|    today|\n| 2024-02-21 00:00:00|today-30d|\n+--------------------+---------+\n\n'})}),"\n",(0,a.jsx)(n.p,{children:"Looks great! We just added some data to OpenHouse and queried the data using Spark SQL."}),"\n",(0,a.jsxs)(n.p,{children:["To find out more about other SQL commands that OH supports, please visit the ",(0,a.jsx)(n.a,{href:"/docs/User%20Guide/Catalog/SQL",children:"SQL User Guide"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"optional-control-access-to-tables",children:"(Optional) Control access to Tables"}),"\n",(0,a.jsx)(n.p,{children:"We will continue with the same environment and the table (ie db.table) as before for this section."}),"\n",(0,a.jsxs)(n.p,{children:["You might have seen the parameter ",(0,a.jsx)(n.code,{children:"spark.sql.catalog.openhouse.auth-token=$(cat /var/config/openhouse.token)"})," when you\nlaunched the sparkshell. This parameter sets up the client with your user token."]}),"\n",(0,a.jsx)(n.p,{children:"As you did before, start the spark-shell and run the following SQL command to make it fail."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:'scala> spark.sql("GRANT SELECT ON TABLE openhouse.db.tb TO user_1").show\n\njava.lang.IllegalArgumentException: 400 , {"status":"BAD_REQUEST","error":"Bad Request","message":"db.tb2 is not a shared table","stacktrace":null,"cause":"Not Available"}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This error means the table is not sharable. ",(0,a.jsx)(n.strong,{children:"In OpenHouse, tables are private by default"}),". You can share them by\nrunning the SQL command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:'scala> spark.sql("ALTER TABLE openhouse.db.tb SET POLICY ( SHARING=true )")\n'})}),"\n",(0,a.jsx)(n.p,{children:"In order to check the ACLs for this table, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-SQL",children:'\nscala> spark.sql("SHOW GRANTS ON TABLE openhouse.db.tb2").show\n+---------+---------+\n|privilege|principal|\n+---------+---------+\n|   SELECT|   user_1|\n+---------+---------+\n\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can also apply similar access control for database entity, please refer to the\n",(0,a.jsx)(n.a,{href:"/docs/User%20Guide/Catalog/SQL#grant-revoke",children:"User Guide"})," to learn more."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>r});var a=s(7294);const o={},t=a.createContext(o);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);